Ahui Writes Word
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)


Problem Description
We all know that English is very important, so Ahui strive for this in order to learn more English words. To know that word has its value and complexity of writing (the length of each word does not exceed 10 by only lowercase letters), Ahui wrote the complexity of the total is less than or equal to C.
Question: the maximum value Ahui can get.
Note: input words will not be the same.
 

Input
The first line of each test case are two integer N , C, representing the number of Ahui’s words and the total complexity of written words. (1 ≤ N ≤ 100000, 1 ≤ C ≤ 10000)
Each of the next N line are a string and two integer, representing the word, the value(Vi ) and the complexity(Ci ). (0 ≤ Vi , Ci ≤ 10)

 

Output
Output the maximum value in a single line for each test case.

 

Sample Input
5 20
go 5 8
think 3 7
big 7 4
read 2 6
write 3 5
 

Sample Output
15
Hint
Input data is huge,please use “scanf(“%s”,s)”


一般的01背包会TLE，因为N * C = 1000000000；但是仔细考虑下，其实每个单词v跟c都小于等于10，所以这么大的输入量，必定有单词的价值跟复杂度是完全相同的，因为10*10=100；因此可以考虑用多重背包减小时间复杂度。


#include<iostream>
using namespace std;

int dp[10001],C;
int bag[11][11];//横坐标表示价值，纵坐标表示体积，dp[va][vo]表示价值va,体积vo的背包的个数

inline int Max(int a,int b)
{
	if(a>b) return a;
	return b;
}

inline void com(int va,int vo)//完全背包
{
	int i;
	for(i=vo;i<=C;i++)
	{
		dp[i]=Max(dp[i],dp[i-vo]+va);
	}
}

inline void One(int va,int vo)//01背包
{
	int i;
	for(i=C;i>=vo;i--)
	{
		dp[i]=Max(dp[i],dp[i-vo]+va);
	}
}

inline void Muti(int va,int vo)
{
	if(vo*bag[va][vo]>=C)//完全背包
	{
		com(va,vo);
	}
	else//01背包
	{
		int k=1;
		while(k<bag[va][vo])
		{
			One(k*va,k*vo);
			bag[va][vo]-=k;
			k*=2;
		}
		One(bag[va][vo]*va,bag[va][vo]*vo);
	}
}

int main()
{
	int N,va,vo,i,j;
	while(scanf("%d%d",&N,&C)!=EOF)
	{
		memset(bag,0,sizeof(bag));
		for(i=0;i<=C;i++) dp[i]=0;
		while(N--)
		{
			scanf("%*s%d%d",&va,&vo);
			bag[va][vo]++;
		}
		for(i=0;i<11;i++)//价值
		{
			for(j=0;j<11;j++)//体积
			{
				if(bag[i][j]==0)continue;
				Muti(i,j);
			}
		}
		printf("%d\n",dp[C]);
	}
	return 0;
}

