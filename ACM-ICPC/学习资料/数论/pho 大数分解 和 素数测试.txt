#include <stdio.h>
#include <math.h>
#include <stdlib.h>

typedef long long ll;
#define M 262145
int prime[M/8]={2},top=1;
bool tag[M];

void init_prime()
{
	int i,tmp,k,max = sqrt((double)M)+1;
	for(i=3;i<max;i+=2)
		if(!tag[i])
		{
			prime[top++] = i;
			tmp = i<<1;
			for(k=i*i;k<M;k+=tmp)
				tag[k] = true;
		}
	for( ;i<M;i+=2)
		if(!tag[i])
			prime[top++]=i;
	return ;
}

// a*b mod c
ll mul(ll a,ll b,ll c)
{
	ll ans = 0;
	while(b)
	{
		if(b&1)ans = (ans+a)%c;
		a = (a<<1)%c;
		b >>= 1;
	}
	return ans;
}

ll gcd(ll a,ll b)
{
	return !b?a:gcd(b,a%b);
}
/*
    pollard-rho 大数分解方法

    设计一个函数 f(x) = x^2 +/- a(a != -2,0) mod N

	然后 任意取一个 x0
	xn = f(xn-1).....
	d 为N一因子
	xi = xj mod d
	xi != xj mod N
	gcd(xi-xj,N)即为N个一个因子
	....
	另 xi = f(xi-1) mod N
	   yi = f(f(yi-1)) mod N

	然后搜索因子即可
*/
ll f(ll x,ll n)
{
	return (mul(x,x,n)+1)%n;
}
ll pollard_rho(ll n)
{
	ll x=rand(),y,ans;
	x=f(x,n);
	y=f(x,n);
	ans =1;
	while(ans == 1)
	{
		x = f(x,n);
		y = f(f(y,n),n);
		ans = gcd(y-x,n);
		if(ans<0)ans*=-1;
	}
	return ans;
}

//a^b mod c
ll power(ll a,ll b,ll c)
{
	ll ans=1;
	while(b)
	{
		if(b&1)ans = mul(ans,a,c);
		a = mul(a,a,c);
		b >>= 1;
	}
	return ans;
}

// miller-rabbin测试,返回true表示通过一次，false表示没通过
bool miller_rabbin(ll a,ll p)
{
	int c = 0;
	ll tmp=p-1,x;
	while(!(tmp&1))
	{
		tmp >>= 1;
		c++;
	}
	tmp = power(a,tmp,p);
	while(c--)
	{
		x = tmp;
		tmp = mul(tmp,tmp,p);
		if(tmp == 1&&x!=1&&x!=(p-1))
			return false;
	}
	if(tmp != 1)return false;
	return true;
}

ll find(ll n)
{
	for(int i=0;i<top;i++)
		if(n%prime[i] == 0)
			return prime[i];
	ll ans = pollard_rho(n);
	if(ans*ans > n)ans = n/ans;
	return ans;
}

int main()
{
	init_prime();
	int t,i;
	bool flag;
	ll n;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%I64d",&n);
		flag = true;
		if(n<M)
		{
			if(n<2)flag = false;
			else if(n>2&&!(n&1))
				flag = false;
			else if(n>2)
				flag = !tag[n];
		}
		else
		{
			for(i=3;i<100&&flag;i+=2)
				flag = miller_rabbin(i,n);
		}
		if(flag)printf("Prime\n");
		else printf("%d\n",find(n));
	}
	return 0;
}