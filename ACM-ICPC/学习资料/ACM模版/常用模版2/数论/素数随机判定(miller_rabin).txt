//miller rabin
//判断自然数n是否为素数
//time越高失败概率越低,一般取10到50
#include <stdlib.h>
#ifdef WIN32
typedef __int64 i64;
#else
typedef long long i64;
#endif

int modular_exponent(int a,int b,int n){ //a^b mod n
	int ret=1;//important!
	for (;b;b>>=1,a=(int)((i64)a)*a%n)
		if (b&1)
			ret=(int)((i64)ret)*a%n;
	return ret;
}

// Carmicheal number: 561,41041,825265,321197185
int miller_rabin(int n,int time=10){
	if (n==1||(n!=2&&!(n%2))||(n!=3&&!(n%3))||(n!=5&&!(n%5))||(n!=7&&!(n%7)))
		return 0;
	while (time--)
		if (modular_exponent(((rand()&0x7fff<<16)+rand()&0x7fff+rand()&0x7fff)%(n-1)+1,n-1,n)!=1)
			return 0;
	return 1;
}



typedef unsigned __int64 llong;
llong mod_pro(llong x,llong y,llong n)
{
	llong ret=0,tmp=x%n;
	while(y)
		{
			if(y&0x1)if((ret+=tmp)>n)ret-=n;
			if((tmp<<=1)>n)tmp-=n;
			y>>=1;
		}
	return ret;
}
llong mod(llong a,llong b,llong c)
{
	llong ret=1;
	while(b)
		{
			if(b&0x1)ret=mod_pro(ret,a,c);
			a=mod_pro(a,a,c);
			b>>=1;
		}
	return ret;
}
llong ran()
{
	llong ret=rand();
	return ret*rand();
}
bool is_prime(llong n,int t)
{
	if(n<2)return false;
	if(n==2)return true;
	if(!(n&0x1))return false;
	llong k=0,m,a,i;
	for(m=n-1;!(m&1);m>>=1,k++);
	while(t--)
		{
			a=mod(ran()%(n-2)+2,m,n);
			if(a!=1)
				{
					for(i=0;i<k&&a!=n-1;i++)
						a=mod_pro(a,a,n);
					
					if(i>=k)return false;
				}
		}
	return true;
}
