I love sneakers!
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)

Problem Description
After months of hard working, Iserlohn finally wins awesome amount of scholarship. As a great zealot of sneakers, he decides to spend all his money on them in a sneaker store.



There are several brands of sneakers that Iserlohn wants to collect, such as Air Jordan and Nike Pro. And each brand has released various products. For the reason that Iserlohn is definitely a sneaker-mania, he desires to buy at least one product for each brand.
Although the fixed price of each product has been labeled, Iserlohn sets values for each of them based on his own tendency. With handsome but limited money, he wants to maximize the total value of the shoes he is going to buy. Obviously, as a collector, he won’t buy the same product twice.
Now, Iserlohn needs you to help him find the best solution of his problem, which means to maximize the total value of the products he can buy.
 

Input
Input contains multiple test cases. Each test case begins with three integers 1<=N<=100 representing the total number of products, 1 <= M<= 10000 the money Iserlohn gets, and 1<=K<=10 representing the sneaker brands. The following N lines each represents a product with three positive integers 1<=a<=k, b and c, 0<=b,c<100000, meaning the brand’s number it belongs, the labeled price, and the value of this product. Process to End Of File. 
 

Output
For each test case, print an integer which is the maximum total value of the sneakers that Iserlohn purchases. Print "Impossible" if Iserlohn's demands can’t be satisfied. 
 

Sample Input
5 10000 3
1 4 6
2 5 7
3 4 99
1 55 77
2 44 66
 

Sample Output
255

//我的
#include<iostream>
using namespace std;

struct N
{
    int vo,va;
}node[12][102]; 

int len[12];
int dp[12][10002];

int Max(int a,int b)
{
    if(a>b) return a;
    return b;
}
/*
void printff(int k,int m)
{
    int i,j;
    for(i=0;i<=k;i++)
    {
        for(j=0;j<=m;j++)
        {
            printf("%d *",dp[i][j]);
        }
        putchar('\n');
    }
}
*/
int main()
{
    int n,m,k,a,i,j,l;
    while(scanf("%d%d%d",&n,&m,&k)!=EOF)
    {
        memset(len,0,sizeof(len));//len[i]表示第i个品牌的数目 
        while(n--)
        {
            scanf("%d",&a);
            //scanf("%d%d",&node[a][len[a]].vo,&node[a][len[a]++].va);这个写法是错的，因为可能从右向左执行代码，老师帮我找到的
			scanf("%d%d",&node[a][len[a]].vo,&node[a][len[a]].va);
			len[a]++;
        }
        for(i=1;i<=k;i++)
        {
            if(len[i]==0) break;//出现0说明不满足k种
        }
        if(i!=k+1)
        {
            printf("Impossible\n");
            continue;
        }
        memset(dp,-1,sizeof(dp));//dp[i][j].i表示第几个品牌，j表示容量
        dp[0][0]=0;
        for(i=1;i<=k;i++)//第k个品牌
        {
            for(j=0;j<len[i];j++)//每个品牌的每种鞋子
            {
                for(l=m;l>=node[i][j].vo;l--)
                {
                    if(dp[i][l-node[i][j].vo]!=-1)
                        dp[i][l]=Max(dp[i][l],dp[i][l-node[i][j].vo]+node[i][j].va);
                    if(dp[i-1][l-node[i][j].vo]!=-1)
                        dp[i][l]=Max(dp[i][l],dp[i-1][l-node[i][j].vo]+node[i][j].va);
                }
            }
        }
        //printff(k,m);
        int    MAX=-1;
        for(i=0;i<=m;i++)//找到最大
        {
            if(MAX<dp[k][i])
            {
                MAX=dp[k][i];
            }
        }
        if(MAX>0)
            printf("%d\n",MAX);
        else
            printf("Impossible\n");
    }
    return 0;
}
/*
4 10 2
1 4 5
1 3 7
2 1 6
2 2 1
*/


测试数据
3 10 2
1 5 2
1 2 3
2 10 7
应该是impossible
//这个代码错误！！！！dp不能赋值为0
#include<iostream>
using namespace std;

struct N
{
    int vo,va;
}node[12][102]; 

int len[12];
int dp[12][10002];

int Max(int a,int b)
{
    if(a>b) return a;
    return b;
}
int main()
{
    int n,m,k,a,i,j,l;
    while(scanf("%d%d%d",&n,&m,&k)!=EOF)
    {
        memset(len,0,sizeof(len));//len[i]表示第i个品牌的数目 
        while(n--)
        {
            scanf("%d",&a);
			scanf("%d%d",&node[a][len[a]].vo,&node[a][len[a]].va);
			len[a]++;
        }
        for(i=1;i<=k;i++)
        {
            if(len[i]==0) break;//出现0说明不满足k种
        }
        if(i!=k+1)
        {
            printf("Impossible\n");
            continue;
        }
		memset(dp,0,sizeof(dp));
		for(i=1;i<=k;i++)
		{
			for(j=0;j<len[i];j++)
			{
				for(l=m;l>=node[i][j].vo;l--)
				{
					dp[i][l]=Max(dp[i][l],dp[i][l-node[i][j].vo]+node[i][j].va);
					dp[i][l]=Max(dp[i][l],dp[i-1][l-node[i][j].vo]+node[i][j].va);
				}
			}
		}
		printf("%d\n",dp[k][m]);
    }
    return 0;
}


//分组背包问题
//代码来自：http://hi.baidu.com/a363310925/blog/item/663fe94613672a3286947359.html
/*
题意：
Iserlohn要买运动鞋，商店总共有n双运动鞋Iserlohn喜欢，他总共有V元钱，这些运动鞋分为k类，没类都有自己的编号id，单价p，对Iserlohn的价值v。
Iserlohn想每一类运动鞋至少买一双，在不超过他所拥有的总金额前提下，使他得到的v最大。
状态设计：
如果没有品牌的分类，这个题就是经典的01背包问题；当然，这里有了品牌的分类，使用
01背包自然是不行了；这就涉及到了加维。如何加维呢？加维的目的，是为了能够更好的表示
状态，根据题意的要求状态的表示要求有二：A、每个品牌至少要有一件；B、钱的最大花费是
有限制的；所以很容易我们就可以确定在一维的基础上加一维，用二维表示;
f[kind][money]   （kind表示当前已经拥有的品牌种类数目，money    表示当前已经花费了的前
的数目）。
状态转移：
根据我们的状态设计；
当前状态的来源有二：
A、当前品牌数目的前提之下取最大的值；
B、在比当前数目小的基础之上放一个另外品牌的商品的最大值；
所以我们就很容易就设计出状态转移方程：
f[j][v]= max(f[j][v], f[j][v-cost]+value);
f[j][v]= max(f[j][v], f[j-1][v-cost]+value);
注意最后别忘了判断运动鞋的品牌种类有没有K。




恩，初看这题就是一个0-1背包罢了，但是这题有个条件，就是每种都得保证至少有一个。

方法就是加一维，记录当前背包有多少种。我本来想用位运算的，后来发现只要排序就能解决问题，因为1~K都是得必须出现的，那么只要按顺序更新1~K，就可以产生一个每种都有的背包值了～

首先能想到的是dp[当前物品编号][当前代价]=max(dp[当前物品编号][当前代价],dp[当前物品编号][当前代价-物品代价])，这是基本的0-1背包思想。

然后再要做的事情就是维护一个传递性，由于我们已经对物品按编号排序，可以想到这个:dp[当前物品编号][当前代价]=max(dp[当前物品编号-1][当前代价-物品代价],dp[当前物品编号][当前代价])，由于是按顺序做的，这样就能维护一个传递性。

然后一直WA，这真是悲剧了，后来经胡大牛指点，说只要把两个if的位置换一下就能AC。

#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
struct node 
{
    int a,b,c;
}shoe[101];

int dp[11][10001];

bool cmp(node a,node b)
{
	return a.a<b.a;
}

int main(void) 
{
    int n,m,k,i,j;
    while(scanf("%d%d%d",&n,&m,&k)!=EOF) 
	{
        for(i=0;i<n;i++)  scanf("%d%d%d",&shoe[i].a,&shoe[i].b,&shoe[i].c);
        sort(shoe,shoe+n,cmp);
        memset(dp,-1,sizeof(dp));
        dp[0][0]=0;
        for(i=0;i<n;i++)
		{
            for(j=m;j>=shoe[i].b;j--) 
			{
				if(dp[shoe[i].a][j-shoe[i].b]!=-1&&dp[shoe[i].a][j-shoe[i].b]+shoe[i].c>dp[shoe[i].a][j])
				{
                    dp[shoe[i].a][j]=dp[shoe[i].a][j-shoe[i].b]+shoe[i].c;
                }
				if(dp[shoe[i].a-1][j-shoe[i].b]!=-1&&dp[shoe[i].a-1][j-shoe[i].b]+shoe[i].c>dp[shoe[i].a][j])
				{
                    dp[shoe[i].a][j]=dp[shoe[i].a-1][j-shoe[i].b]+shoe[i].c;
                }
            }
        }
        int max=-1;
        for(i=0;i<=m;i++) 
		{
            if(dp[k][i]>max)max=dp[k][i];
        }
        if(max<0)puts("Impossible");
        else printf("%d\n",max);
    }
    return 0;
}

这是可以AC的顺序。你看到了没？需要先维护当前物品编号的传递性，反之WA。

原因在于出现了某些物品的代价是0.

想想，如果shoe[i].b==0，那么就会出现，先从shoe[i].a-1传递到shoe[i].a，然后shoe[i][j]又自己更新了dp[shoe[i].a][j]，因为b==0，所以相当于这双鞋子买了两次。

用脚趾想都知道这会招致WA的。

诸如:

5 10000 3
1 4 6
2 5 7
3 4 99
1 55 77
2 0 66