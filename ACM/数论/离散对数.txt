#include <iostream>
#include <stdio.h>
#include <string.h>
#include <cmath>
using namespace std;
const int len = (1<<15)-1;
struct node
{
	int top,value,next;
}thash[len<<1];
bool tag[len+10];
int ppp;

void insert(int a,int b)
{
	int c = a&len;
	if(!tag[c])
	{
		tag[c] = true;
		thash[c].top = b;
		thash[c].value = a;
		thash[c].next = -1;
		return ;
	}
	if(thash[c].value == a)
	{
			thash[c].top = b;
			return;
	}
	while(thash[c].next > -1)
	{
		c =  thash[c].next;
		if(thash[c].value == a)
		{
			thash[c].top = b;
			return;
		}
	}
	thash[c].next = ++ppp;
	thash[ppp].top = b;
	thash[ppp].value = a;
	thash[ppp].next = -1;
	return ;
}

int findhash(int a)
{
	int t=a&len;
	if(!tag[t])return -1;
	while(thash[t].value != a)
	{
		if(thash[t].next == -1)
			return -1;
		t = thash[t].next;
	}
	return thash[t].top;
}

int power(int a,int b,int c)
{
	long long ans=1,tmp=a%c;
	while(b)
	{
		if(b&1)ans=ans*tmp%c;
		tmp = tmp*tmp%c;
		b >>= 1;
	}
	return ans;
}

//a^x = b mod c，  gcd(a,c)==1
//shanks 小步-大步算法
int find(int a,int b,int c)
{
	b%=c;a%=c;
	memset(tag,0,sizeof(tag));
	ppp = len+5;

	//寻找
	long long search,i,max = ceil(sqrt((double)c)),bit = power(a,max,c),value=b;
	int temp;
	//先计算 b,b*a,b*a^2...b*a^max，i,尽可能选大的
	for(i=0;i<max;value = (long long)value*a%c,i++)
		insert(value,i);

	//在计算 a^max,a^2*max...a^max*max，看有没有 b*a^i==a^max*j mod c  C为素数时在0--c中解唯一否则将发生错误
	search = bit;
	for(i=1;i<=max;i++,search = (long long)search*bit%c)
		if((temp = findhash(search))>-1)
		{
			int ans  = i*max - temp;
			return ans;
		}
	return -1;
}

int gcd(int a,int b)
{
	return  !b?a:gcd(b,a%b);
}
void ex_gcd(int &x,int &y,int a,int b)
{
	if(!b)
	{
		x=1;
		y=0;
	}
	else 
	{
		ex_gcd(y,x,b,a%b);
		y -= a/b*x;
	}
	return ;
}

//a^x = b mod c 
int search(int a,int b,int c)
{
	if(b == 1)return 0;
	a %= c;
	int ans = 1%c,count=0,tmp,ni;

	//c 小于 2^32
	for(int i=0;i<33;i++,ans=(long long)ans*a%c)
		if(ans == b)return i;

	// a*k mod a*d === a*(k%d)
	while((tmp=gcd(a,c)) != 1)
	{
		if(b%tmp != 0)
			return -1;
		b /= tmp;
		c /= tmp;
		count ++;
		ni = a/tmp;
		while((tmp=gcd(ni,c)) != 1)
		{
			if(b%tmp!=0)
				return -1;
			b /= tmp;
			c /= tmp;
			ni /= tmp; 
		}
		//(k*a^x-i)%c = b其中 gcd(k,c)==1,则a^(x-i) %c = (b*k^-1)%c
		if(ni != 1)
		{
			int x,y;
			ex_gcd(x,y,ni,c);
			x = (x%c+c)%c;
			b = ((long long)b*x)%c;
		}
	}
	tmp = find(a,b,c);
	if(tmp<0)return -1;
	else return count+tmp;
}

int main()
{
	int x,z,k,ans;
	//x^ans = k mod z
	while(~scanf("%d%d%d",&x,&z,&k)&&(x||k||z))
	{
		/*
		if(k>=z)
			//printf("Orz,I can’t find D!\n");
			printf("No Solution\n");
		else
		*/
		{
			k %= z;
			ans = search(x,k,z);
			if(ans>=0)
				printf("%d\n",ans);
			else printf("No Solution\n");
			//else printf("Orz,I can’t find D!\n");
		}
	}
	return 0;
}